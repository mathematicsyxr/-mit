package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate p;
    private OpIterator child1;
    private  OpIterator child2;
    private Tuple t;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // TODO: some code goes here
        this.p=p;
        this.child1=child1;
        this.child2=child2;
        t=null;
    }

    public JoinPredicate getJoinPredicate() {
        // TODO: some code goes here
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        // TODO: some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        // TODO: some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // TODO: some code goes here
        return TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // TODO: some code goes here
        super.open();
        child1.open();
        child2.open();
    }

    public void close() {
        // TODO: some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // TODO: some code goes here
        child1.rewind();
        child2.rewind();

    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested(嵌套)loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * 从 Join 的这个特定实现返回的元组只是从左和右关系连接元组的串联。因此，如果使用相等谓词，将有两个
     *  结果中连接属性的副本。（如果需要，可以使用其他投影运算符删除此类重复列。）
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // TODO: some code goes here
        while (child1.hasNext()||t!=null)
        {
            if(child1.hasNext()&&t==null)
            {
                t=child1.next();//用元组t暂时保存左关系的下一条元组
            }
            Tuple r=null;//用r暂时保存右关系的下一条元组
            while (child2.hasNext())
            {
                r=child2.next();
                if(p.filter(t,r))//判断是否满足筛选条件
                {
                    //将有两个结果中连接属性的
                    int l1=t.getTupleDesc().numFields();
                    int l2=r.getTupleDesc().numFields();
                    int index=0;
                    Tuple tp=new Tuple(getTupleDesc());//创建新的元组保存
                    for (int i = 0; i < l1; i++) {
                        tp.setField(i,t.getField(i));
                        index++;
                    }
                    for (int i = 0; i < l2; i++) {
                        tp.setField(index,r.getField(i));
                        index++;
                    }
                    return tp;
                }
            }
            /*当取到的child2为最后一条元组
             */
            child2.rewind();//reset child2保证t与child2的第一条元组进行比较
            t=null;//????
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // TODO: some code goes here
        return new OpIterator[] {child1,child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // TODO: some code goes here
        this.child1=children[0];
        this.child2=children[1];

    }

}
